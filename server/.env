const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const bodyParser = require('body-parser');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 5000;

// Middleware
app.use(cors());
app.use(bodyParser.json());
app.use(express.json());

// MongoDB Connection with proper error handling
const connectDB = async () => {
  try {
    const mongoURI = process.env.MONGODB_URI || 'mongodb://localhost:5174/constructionideas';
    console.log('Attempting to connect to MongoDB at:', mongoURI);
    
    await mongoose.connect(mongoURI);
    console.log('MongoDB connected successfully');
  } catch (err) {
    console.error('MongoDB connection error:', err);
    process.exit(1); // Exit with failure
  }
};

// Call the connect function
connectDB();

// Create Schema for client idea submissions
const ideaSchema = new mongoose.Schema({
  name: { type: String, required: true },
  phone: { type: String, required: true },
  email: { type: String, required: true },
  idea: { type: String, required: true },
  budget: { type: Number, required: true },
  workType: { type: String, required: true }, // Removed enum to troubleshoot
  fileUrl: { type: String },
  submittedAt: { type: Date, default: Date.now },
  status: { type: String, default: 'Pending' }
});

// Create model
const Idea = mongoose.model('Idea', ideaSchema);

// API Routes
app.post('/api/submitIdea', async (req, res) => {
  console.log('Received form data:', JSON.stringify(req.body, null, 2));
  
  try {
    // Create a new idea instance with the request body
    const newIdea = new Idea(req.body);
    
    // Validate the idea against the schema
    const validationError = newIdea.validateSync();
    if (validationError) {
      console.error('Validation error:', validationError);
      return res.status(400).json({ 
        success: false, 
        message: 'Validation failed', 
        errors: validationError.errors 
      });
    }
    
    // Save the idea to the database
    const savedIdea = await newIdea.save();
    console.log('Idea saved successfully:', savedIdea);
    
    return res.status(201).json({ 
      success: true, 
      message: 'Idea submitted successfully', 
      data: savedIdea 
    });
  } catch (error) {
    console.error('Error handling form submission:', error);
    return res.status(500).json({ 
      success: false, 
      message: 'Server error', 
      error: error.message,
      stack: process.env.NODE_ENV === 'production' ? null : error.stack
    });
  }
});

// Get all ideas - with error handling
app.get('/api/ideas', async (req, res) => {
  try {
    const ideas = await Idea.find().sort({ submittedAt: -1 });
    console.log(`Found ${ideas.length} ideas`);
    res.status(200).json({ success: true, data: ideas });
  } catch (error) {
    console.error('Error fetching ideas:', error);
    res.status(500).json({ success: false, message: error.message });
  }
});

// Test route to verify server is running
app.get('/', (req, res) => {
  res.send('Construction Ideas API is running');
});

// Start server
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});

// Handle unhandled promise rejections
process.on('unhandledRejection', (err) => {
  console.error('Unhandled Promise Rejection:', err);
  // Close server & exit process
  // server.close(() => process.exit(1));
});